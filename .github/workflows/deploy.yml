name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - test
      - feature-branch-1
      - ksaipavan13-patch-1
      - ksaipavan13-patch-2
      - update-version
  pull_request:
    branches:
      - main
      - test
      - feature-branch-1
      - ksaipavan13-patch-1
      - ksaipavan13-patch-2
      - update-version
  workflow_dispatch:
    inputs:
      commit_id:
        description: 'Commit ID to deploy'
        required: true
      create_tag:
        description: 'Create a new tag'
        required: false
        default: 'false'
      deploy:
        description: 'Deploy the application'
        required: false
        default: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_id || github.sha }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Conditionally Create and Push Tag
        if: ${{ github.event.inputs.create_tag == 'true' }}
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.PAT }}
          tag_prefix: "v"
          create_annotated_tag: true

      - name: Conditionally Create GitHub Release
        if: ${{ github.event.inputs.create_tag == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          draft: false
          prerelease: false

      - name: Create GitHub Deployment
        if: ${{ github.event.inputs.deploy == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{"ref":"${{ github.event.inputs.commit_id || github.sha }}","environment":"Test_DEV","description":"Deployment initiated by GitHub Actions","auto_merge":false}'

      - name: Deploy to Production
        if: ${{ github.event.inputs.deploy == 'true' }}
        run: |
          echo "Deploying to production..."
          # Add your actual deployment steps here
          echo "Deployment command executed successfully"
          echo "Application deployed!"

      - name: Update GitHub Deployment Status
        if: ${{ github.event.inputs.deploy == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          DEPLOYMENT_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            | jq '.[0].id')
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -d '{"state":"success","environment_url":"https://your-app-url.com","log_url":"${{ github.run_url }}","description":"Deployment completed successfully"}'
